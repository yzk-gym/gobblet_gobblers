#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var debug = require('debug')('gobblet-gobblers:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
let room = require('../sockets/room.js');
let rooms = {};

io.sockets.on('connection', (socket) => {

  let roomId = '';
  console.log('接続');

  // プライベートマッチ
  socket.on('joinPrivateRoom', (data) => {

    if (rooms[data.roomId] === undefined) {
      rooms[data.roomId] = room();
      socket.join(data.roomId);
      rooms[data.roomId].join(data.usernname);
      socket.emit('loading', '処理中...');
    } else if (rooms[data.roomId].member().length >= 2) {
      console.log('3にん以上');
    } else {
      rooms[data.roomId].join(data.usernname);
      console.log('二人目が入室しました');
      socket.join(data.roomId);
      if (rooms[data.roomId].isStartGame()) {
        socket.emit('setMessage', '対戦相手が見つかりました');
        socket.to(data.roomId).emit('setMessage', '対戦相手が見つかりました');
      };
    };
  });

  socket.on('emitClientToServer', (data) => {
    io.to(data.roomId).emit('ReceiveServerToClient', { value: data.value });
  });

  socket.on('disconnect', () => {
    //io.to(data.roomId).emit('ReceiveServerToClient', { value: '通信が切断されました' });
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
